{"ast":null,"code":"var fs = require('fs'),\n    mm = require('minimatch'),\n    path = require('path');\n/**\n * merge two objects by extending target object with source object\n * @param target object to merge\n * @param source object to merge\n * @param {Boolean} [modify] whether to modify the target\n * @returns {Object} extended object\n */\n\n\nfunction extend(target, source, modify) {\n  var result = target ? modify ? target : extend({}, target, true) : {};\n  if (!source) return result;\n\n  for (var key in source) {\n    if (source.hasOwnProperty(key) && source[key] !== undefined) {\n      result[key] = source[key];\n    }\n  }\n\n  return result;\n}\n/**\n * determine if a string is contained within an array or matches a regular expression\n * @param   {String} str string to match\n * @param   {Array|Regex} match array or regular expression to match against\n * @returns {Boolean} whether there is a match\n */\n\n\nfunction matches(str, match) {\n  if (Array.isArray(match)) {\n    var l = match.length;\n\n    for (var s = 0; s < l; s++) {\n      if (mm(str, match[s])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return match.test(str);\n}\n/**\n * read files and call a function with the contents of each file\n * @param  {String} dir path of dir containing the files to be read\n * @param  {String} encoding file encoding (default is 'utf8')\n * @param  {Object} options options hash for encoding, recursive, and match/exclude\n * @param  {Function(error, string)} callback  callback for each files content\n * @param  {Function(error)}   complete  fn to call when finished\n */\n\n\nfunction readFilesStream(dir, options, callback, complete) {\n  if (typeof options === 'function') {\n    complete = callback;\n    callback = options;\n    options = {};\n  }\n\n  if (typeof options === 'string') options = {\n    encoding: options\n  };\n  options = extend({\n    recursive: true,\n    encoding: 'utf8',\n    doneOnErr: true\n  }, options);\n  var files = [];\n\n  var done = function (err) {\n    if (typeof complete === 'function') {\n      if (err) return complete(err);\n      complete(null, files);\n    }\n  };\n\n  fs.readdir(dir, function (err, list) {\n    if (err) {\n      if (options.doneOnErr === true) {\n        if (err.code === 'EACCES') return done();\n        return done(err);\n      }\n    }\n\n    var i = 0;\n\n    if (options.reverse === true || typeof options.sort == 'string' && /reverse|desc/i.test(options.sort)) {\n      list = list.reverse();\n    } else if (options.sort !== false) list = list.sort();\n\n    (function next() {\n      var filename = list[i++];\n      if (!filename) return done(null, files);\n      var file = path.join(dir, filename);\n      fs.stat(file, function (err, stat) {\n        if (err && options.doneOnErr === true) return done(err);\n\n        if (stat && stat.isDirectory()) {\n          if (options.recursive) {\n            if (options.matchDir && !matches(filename, options.matchDir)) return next();\n            if (options.excludeDir && matches(filename, options.excludeDir)) return next();\n            readFilesStream(file, options, callback, function (err, sfiles) {\n              if (err && options.doneOnErr === true) return done(err);\n              files = files.concat(sfiles);\n              next();\n            });\n          } else next();\n        } else if (stat && stat.isFile()) {\n          if (options.match && !matches(filename, options.match)) return next();\n          if (options.exclude && matches(filename, options.exclude)) return next();\n          if (options.filter && !options.filter(filename)) return next();\n          if (options.shortName) files.push(filename);else files.push(file);\n          var stream = fs.createReadStream(file);\n\n          if (options.encoding !== null) {\n            stream.setEncoding(options.encoding);\n          }\n\n          stream.on('error', function (err) {\n            if (options.doneOnErr === true) return done(err);\n            next();\n          });\n          if (callback.length > 3) {\n            if (options.shortName) callback(null, stream, filename, next);else callback(null, stream, file, next);\n          } else callback(null, stream, next);\n        } else {\n          next();\n        }\n      });\n    })();\n  });\n}\n\nmodule.exports = readFilesStream;","map":{"version":3,"names":["fs","require","mm","path","extend","target","source","modify","result","key","hasOwnProperty","undefined","matches","str","match","Array","isArray","l","length","s","test","readFilesStream","dir","options","callback","complete","encoding","recursive","doneOnErr","files","done","err","readdir","list","code","i","reverse","sort","next","filename","file","join","stat","isDirectory","matchDir","excludeDir","sfiles","concat","isFile","exclude","filter","shortName","push","stream","createReadStream","setEncoding","on","module","exports"],"sources":["/Users/Paul_1/node_modules/node-dir/lib/readfilesstream.js"],"sourcesContent":["var fs = require('fs'),\n    mm = require('minimatch'),\n    path = require('path');\n\n/**\n * merge two objects by extending target object with source object\n * @param target object to merge\n * @param source object to merge\n * @param {Boolean} [modify] whether to modify the target\n * @returns {Object} extended object\n */\nfunction extend(target, source, modify) {\n    var result = target ? modify ? target : extend({}, target, true) : {};\n    if (!source) return result;\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && source[key] !== undefined) {\n            result[key] = source[key];\n        }\n    }\n    return result;\n}\n\n/**\n * determine if a string is contained within an array or matches a regular expression\n * @param   {String} str string to match\n * @param   {Array|Regex} match array or regular expression to match against\n * @returns {Boolean} whether there is a match\n */\nfunction matches(str, match) {\n    if (Array.isArray(match)) {\n        var l = match.length;\n        for( var s=0; s < l; s++) {\n            if ( mm(str,match[s])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return match.test(str);\n}\n\n/**\n * read files and call a function with the contents of each file\n * @param  {String} dir path of dir containing the files to be read\n * @param  {String} encoding file encoding (default is 'utf8')\n * @param  {Object} options options hash for encoding, recursive, and match/exclude\n * @param  {Function(error, string)} callback  callback for each files content\n * @param  {Function(error)}   complete  fn to call when finished\n */\nfunction readFilesStream(dir, options, callback, complete) {\n    if (typeof options === 'function') {\n        complete = callback;\n        callback = options;\n        options = {};\n    }\n    if (typeof options === 'string') options = {\n        encoding: options\n    };\n    options = extend({\n        recursive: true,\n        encoding: 'utf8',\n        doneOnErr: true\n    }, options);\n    var files = [];\n\n    var done = function(err) {\n        if (typeof complete === 'function') {\n            if (err) return complete(err);\n            complete(null, files);\n        }\n    };\n\n    fs.readdir(dir, function(err, list) {\n        if (err) Â {\n            if (options.doneOnErr === true) {\n              if (err.code === 'EACCES') return done();\n              return done(err);\n            }\n        }\n        var i = 0;\n\n        if (options.reverse === true ||\n            (typeof options.sort == 'string' &&\n                (/reverse|desc/i).test(options.sort))) {\n            list = list.reverse();\n        } else if (options.sort !== false) list = list.sort();\n\n        (function next() {\n            var filename = list[i++];\n            if (!filename) return done(null, files);\n            var file = path.join(dir, filename);\n            fs.stat(file, function(err, stat) {\n                if (err && options.doneOnErr === true) return done(err);\n                if (stat && stat.isDirectory()) {\n                    if (options.recursive) {\n                        if (options.matchDir && !matches(filename, options.matchDir)) return next();\n                        if (options.excludeDir && matches(filename, options.excludeDir)) return next();\n                        readFilesStream(file, options, callback, function(err, sfiles) {\n                            if (err && options.doneOnErr === true) return done(err);\n                            files = files.concat(sfiles);\n                            next();\n                        });\n                    } else next();\n                } else if (stat && stat.isFile()) {\n                    if (options.match && !matches(filename, options.match)) return next();\n                    if (options.exclude && matches(filename, options.exclude)) return next();\n                    if (options.filter && !options.filter(filename)) return next();\n                    if (options.shortName) files.push(filename);\n                    else files.push(file);\n                    var stream = fs.createReadStream(file);\n                    if (options.encoding !== null) {\n                        stream.setEncoding(options.encoding);\n                    }\n                    stream.on('error',function(err) {\n                      if (options.doneOnErr === true) return done(err);\n                      next();\n                    });\n                    if (callback.length > 3)\n                        if (options.shortName) callback(null, stream, filename, next);\n                        else callback(null, stream, file, next);\n                        else callback(null, stream, next);\n                }\n                else {\n                  next();\n                }\n            });\n        })();\n\n    });\n}\nmodule.exports = readFilesStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}